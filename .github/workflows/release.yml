name: Release Workflow

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if release documentation exists
        id: check_docs
        run: |
          RELEASE_DOC="docs/releases/v${{ steps.version.outputs.version }}.md"
          if [ -f "$RELEASE_DOC" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release documentation found: $RELEASE_DOC"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release documentation not found: $RELEASE_DOC"
          fi

      - name: Check if release already exists
        id: check_release
        if: steps.check_docs.outputs.exists == 'true'
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release $TAG already exists, skipping..."
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release $TAG does not exist, proceeding..."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract release notes
        id: extract_notes
        if: steps.check_docs.outputs.exists == 'true' && steps.check_release.outputs.exists == 'false'
        run: |
          RELEASE_DOC="docs/releases/v${{ steps.version.outputs.version }}.md"
          VERSION="${{ steps.version.outputs.version }}"
          TAG="${{ steps.version.outputs.tag }}"

          # Get current date in YYYY-MM-DD format
          CURRENT_DATE=$(date +%Y-%m-%d)

          # Find previous tag for compare link
          PREVIOUS_TAG=$(git tag --sort=version:refname | grep -v "^$TAG$" | tail -1)
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag found, use first commit
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            COMPARE_LINK="https://github.com/cabcookie/personal-crm/commits/$TAG"
          else
            COMPARE_LINK="https://github.com/cabcookie/personal-crm/compare/$PREVIOUS_TAG...$TAG"
          fi

          # Extract Major Changes section
          MAJOR_CHANGES=$(awk '
            /^## Major Changes/ { found=1; next }
            /^## / && found { exit }
            found && NF { print }
          ' "$RELEASE_DOC" | sed '/^$/d')

          # Extract Fixes section
          FIXES=$(awk '
            /^## Fixes/ { found=1; next }
            /^## / && found { exit }
            found && NF { print }
          ' "$RELEASE_DOC" | sed '/^$/d')

          # Create release notes with new format
          RELEASE_NOTES="## [$VERSION]($COMPARE_LINK) ($CURRENT_DATE)"

          if [ -n "$MAJOR_CHANGES" ]; then
            RELEASE_NOTES="$RELEASE_NOTES"$'\n\n'"### Major Changes"$'\n\n'"$MAJOR_CHANGES"
          fi

          if [ -n "$FIXES" ]; then
            RELEASE_NOTES="$RELEASE_NOTES"$'\n\n'"### Fixes"$'\n\n'"$FIXES"
          fi

          if [ -z "$MAJOR_CHANGES" ] && [ -z "$FIXES" ]; then
            echo "No Major Changes or Fixes sections found in release documentation"
            exit 1
          fi

          # Save to file for multiline output
          echo "$RELEASE_NOTES" > release_notes.txt
          echo "Release notes extracted successfully"
          echo "Compare link: $COMPARE_LINK"

      - name: Create git tag
        if: steps.check_docs.outputs.exists == 'true' && steps.check_release.outputs.exists == 'false'
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git tag -l | grep -q "^$TAG$"; then
            echo "Tag $TAG already exists locally"
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "Created and pushed tag: $TAG"
          fi

      - name: Create GitHub Release
        if: steps.check_docs.outputs.exists == 'true' && steps.check_release.outputs.exists == 'false'
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          gh release create "$TAG" \
            --title "$TAG" \
            --notes-file release_notes.txt
          echo "Created GitHub release: $TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip release (no documentation)
        if: steps.check_docs.outputs.exists == 'false'
        run: |
          echo "Skipping release creation - no release documentation found for version ${{ steps.version.outputs.version }}"

      - name: Skip release (already exists)
        if: steps.check_docs.outputs.exists == 'true' && steps.check_release.outputs.exists == 'true'
        run: |
          echo "Skipping release creation - release ${{ steps.version.outputs.tag }} already exists"
